panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), "lines"), strip.background = element_rect()
)
)
}
theme_set(theme_tvyal())
save_last_plot <-
function(filename, extension = "png", width = 1008, height = 567) {
filename <- str_replace_all(filename, " ", "_")
last_plot <- recordPlot()
if (extension == "png") {
png(paste0(filename, ".", extension), width = width, height = height)
} else if (extension == "pdf") {
pdf(paste0(filename, ".", extension), width = width, height = height)
} else {
stop("Unsupported file extension. Use 'png' or 'pdf'.")
}
replayPlot(last_plot)
dev.off()
paste0(filename, ".", extension)
}
new_palette_colors <- c(
"#003f5c", "#2f4b7c", "#665191", "#a05195",
"#d45087", "#f95d6a", "#ff7c43", "#ffa600"
)
colfunc <- colorRampPalette(c("#2f4b7c", "#fffcf5", "#f95d6a"))
colfunc2 <- colorRampPalette(new_palette_colors)
colfunc3 <- colorRampPalette(c("#005C4B", new_palette_colors, "#FFD17A", "#FFFCF5"))
update_geom_defaults("rect", list(fill  = new_palette_colors[2], alpha = 0.8))
update_geom_defaults("line", list(color = new_palette_colors[2], alpha = 0.8))
update_geom_defaults("area", list(fill  = new_palette_colors[2], alpha = 0.8))
caption_arm <-  "Հեղինակ` Աղասի Թավադյան   |   tvyal.com   |   tavadyan.com"
caption_eng <-  "Author: Aghasi Tavadyan   |   tvyal.com   |   tavadyan.com"
doParallel::registerDoParallel(cores = 8)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
national_account_html_elements <-
read_html("https://www.armstat.am/am/?nid=202") |>
html_elements("a")
national_account_urls <-
tibble(
url = html_attr(national_account_html_elements, "href"),
text = html_text(national_account_html_elements)
) |>
filter(grepl("^\\.\\./", url)) |>
mutate(
text = str_trim(text),
url = str_replace(url, "^\\.\\.", "https://www.armstat.am")
) |>
filter(text != "")
GDP_services_links <-
national_account_urls |>
filter(grepl("^ՀՆԱ", text)) |>
pull(url)
# Quarterly GDP download
# system(
#   paste0("curl -A 'Mozilla/5.0' \"", GDP_services_links[4],
#          "\" -o \"GDP_quarter.xls\"")
# )
GDP_quarter  <-
left_join(
read_excel("GDP_quarter.xls", skip = 4) |>
rename(code = 1, arm = 2, eng = 3, rus = 4) |>
pivot_longer(matches("\\d{4}"), names_to = "date", values_to = "production"),
read_excel("GDP_quarter.xls", skip = 4, sheet = 4) |>
rename(code = 1, arm = 2, eng = 3, rus = 4) |>
pivot_longer(matches("\\d{4}"), names_to = "date", values_to = "vol_YoY_pct"),
by = join_by(code, arm, eng, rus, date)
)
GDP_quarter |> write_excel_csv("GDP_quarter_tidy.csv")
# Annual GDP download
# system(
#   paste0("curl -A 'Mozilla/5.0' \"", GDP_services_links[1],
#          "\" -o \"GDP_annual.xls\"")
# )
GDP_annual  <-
left_join(
read_excel("GDP_annual.xls", skip = 4) |>
rename(code = 1, arm = 2, eng = 3, rus = 4) |>
pivot_longer(matches("\\d{4}"), names_to = "year", values_to = "production"),
read_excel("GDP_annual.xls", skip = 4, sheet = 4) |>
rename(code = 1, arm = 2, eng = 3, rus = 4) |>
pivot_longer(matches("\\d{4}"), names_to = "year", values_to = "vol_YoY_pct"),
by = join_by(code, arm, eng, rus, year)
) |>
mutate(year = as.integer(year))
GDP_annual |> write_excel_csv("GDP_annual_tidy.csv")
main_GDP_plot_data <-
GDP_quarter  |>
filter(!is.na(code)) |>
mutate(
date = yq(date) + months(3) - days(1),
year = year(date),
eng = str_trunc(eng, 20),
eng = paste0(code, ". ", eng),
eng = fct_lump(eng, n = 7, w = production)
) |>
group_by(date, year, eng) |>
summarise(production = sum(production), .groups = "drop") |>
group_by(eng) |>
mutate(production_yoy = roll_sumr(production, 4)) |>
ungroup() |>
group_by(date) |>
na.omit() |>
mutate(
pct = production_yoy/ sum(production_yoy),
) |>
ungroup() |>
group_by(year) |>
mutate(
pct_text = ifelse(
eng != "Other" & date == max(date) & year %in% c(2013, 2023),
paste0(
"֏ ", number(production_yoy/1e6, accuracy = 0.01), "T (",
percent(pct, accuracy = 0.1), ")", " "
),
NA
),
pct_text = ifelse(
year == 2023 & eng != "Other",
paste0(" ", eng,  " ", pct_text),
pct_text
),
production_yoy = production_yoy / 1e6
) |>
ungroup()
factoring_levels <-
main_GDP_plot_data |>
filter(date == max(date)) |>
mutate(
eng = fct_reorder(eng, production_yoy),
eng = fct_relevel(eng, "Other", after = 0),
eng = fct_rev(eng)
) |>
count(eng) |>
pull(eng)
main_GDP_plot_data <-
main_GDP_plot_data %>%
mutate(eng = factor(eng, levels = factoring_levels))
segments <-
main_GDP_plot_data |>
# filter(year %in% c(2013, 2017, 2020, 2023)) |>
group_by(year) |>
filter(date == max(date)) |>
ungroup() |>
group_by(date) |>
summarise(
production_yoy = sum(production_yoy),
production_yoy_text = number(production_yoy, accuracy = 0.01),
production_yoy = production_yoy + 1
) |>
ungroup()
GDP_main_plot <-
main_GDP_plot_data |>
ggplot(aes(date, production_yoy)) +
geom_segment(
data = segments,
aes(x = date, y = production_yoy - 1, xend = date, yend = production_yoy),color="black"
) +
geom_point(
data = segments,
aes(x = date, y = production_yoy),color="black"
) +
geom_text(
data = segments,
aes(x = date, y = production_yoy + 0.5, label = production_yoy_text)
) +
geom_area(aes(fill = eng)) +
geom_text(
data = main_GDP_plot_data |> filter(date == min(date)),
aes(label = pct_text, color = eng),
position = position_stack(vjust = 0.5), hjust = 1
) +
geom_text(
data = main_GDP_plot_data |> filter(date == max(date)),
aes(label = pct_text, color = eng),
position = position_stack(vjust = 0.5), hjust = -0
) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(breaks = seq(0, 14, 2), labels = number_format()) +
scale_fill_manual(values = new_palette_colors) +
scale_color_manual(values = new_palette_colors) +
coord_cartesian(clip = "off") +
ggthemes::theme_fivethirtyeight() +
labs(
x = NULL,
y = NULL,
fill = NULL,
title = "The Change from Agriculture to Manufacturing",
subtitle = "Output of Goods and Service in Armenia",
captions = paste0(caption_eng, "    |    Data Source: armstat.am")
) +
theme_minimal() +
theme(
axis.line.x = element_line(linewidth = .75),
plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 18),
panel.grid = element_blank(),
axis.text.y=element_blank(),
legend.position = "none",
plot.margin = margin(10,210,10,100),
)
arm_inflation <-
read_csv("~/R/Gcapatker/2024_03_01_Inflation_forecst/inflation_forecast.csv") |>
filter(
indicator == "CPI",
grepl("Actual|ets", model_name),
period == "month"
) |>
transmute(
date = ym(paste(year(date), month(date))),
# inflation = cumprod(value),
inflation = roll_prodr(value, 12),
inflation_model_name = model_name
) |>
na.omit() |>
arrange(date) |>
group_by(date) |>
slice_head(n = 1) |>
ungroup()
GDP_quarter |>
group_by(eng) |>
mutate(
vol_YoY_pct = vol_YoY_pct/100,
vol_YoY_pct2 = production/lag(production, 4),
# diff = vol_YoY_pct2 - vol_YoY_pct + 1,
diff_2 = vol_YoY_pct2 / vol_YoY_pct,
date = yq(date)
) |>
ungroup() |>
left_join(arm_inflation, by = "date") |>
arrange(date) |>
ggplot() +
# geom_boxplot(aes(date, diff, group = date, color = "blue"), alpha = 0.4) +
geom_boxplot(aes(date, diff_2, group = date, color = "red"), alpha = 0.4) +
geom_line(aes(date, inflation))
# arm_inflation |> view()
GDP_annual <-
read_csv("future_gdp_forecast_2.csv") |>
group_by(eng) |>
arrange(eng) |>
mutate(
year = year(date),
month = month(date)
) |>
ungroup() |>
# count(date) |>
left_join(arm_inflation, by = "date") |>
mutate(.value_inf = .value / inflation) |>
group_by(eng, year) |>
summarise(
production = sum(.value),
production_inf = sum(.value_inf)
) |>
ungroup() |>
group_by(eng) |>
mutate(
vol_YoY_pct = production_inf / lag(production) * 100,
) |>
ungroup() |>
left_join(
select(GDP_annual, code, eng) |> unique(), by = "eng"
) |>
filter(year >= 2015) |>
relocate(code)
# GDP_annual |> view()
GDP_annual |>
filter(grepl("Domestic product", eng)) |>
transmute(year, GDP_growth = vol_YoY_pct/100 - 1) |>
na.omit()
read_csv("future_gdp_forecast.csv") |>
filter(eng == "Domestic product (gross, market prices)") |>
select(-contains("volume")) |>
left_join(arm_inflation, by = "date") |>
mutate(
gdp_growth = .value,
across(matches("value|conf"), ~.x/ inflation),
year = year(date)
) |>
group_by(year, .key) |>
view()
summarise(
across(matches("value|conf|gdp"), ~sum(.x))
)
read_csv("future_gdp_forecast.csv") |>
filter(eng == "Domestic product (gross, market prices)") |>
select(-contains("volume")) |>
left_join(arm_inflation, by = "date") |>
mutate(
gdp_growth = .value,
across(matches("value|conf"), ~.x/ inflation),
year = year(date)
) |>
group_by(year, .key) |>
summarise(
across(matches("value|conf|gdp"), ~sum(.x))
)
GDP_change_plot <-
GDP_quarter  |>
filter(!is.na(code)) |>
mutate(
date = yq(date) + months(3) - days(1),
year = year(date),
eng = str_trunc(eng, 40),
eng = paste0(code, ". ", eng),
) |>
group_by(code, eng) |>
mutate(production_yoy = roll_sumr(production, 4) / 1e3) |>
filter(!is.na(production_yoy)) |>
filter(date %in% c(max(date), min(date))) |>
# filter(date %in% c(max(date), as.Date("2022-12-31"))) |>
mutate(year = ifelse(year == min(year), "min_year", "max_year")) |>
select(code, eng, year, production_yoy) |>
pivot_wider(names_from = year, values_from = production_yoy) |>
mutate(
pct_10y_change = number(max_year / min_year, accuracy = 0.01),
middle_year = exp((log(min_year) + log(max_year))/2),  # geomean
color = ifelse(min_year > max_year, "#f95d6a", "#2f4b7c")
) |>
filter(!grepl("^T", eng)) |>
ggplot() +
geom_segment(
aes(x = min_year, xend = max_year, y = fct_reorder(eng, max_year), color = I(color)),
linewidth = 1.2,
lineend = 'round', linejoin = 'round',
arrow = arrow(length = unit(0.1, "inches"))
) +
geom_point(aes(x = min_year, y = eng), color = new_palette_colors[6], size = 3) +
geom_point(aes(x = max_year, y = eng), color = new_palette_colors[2], size = 3) +
geom_text(aes(x = middle_year, y = eng, label = pct_10y_change), vjust = 0) +
geom_point(aes(x = 450, y = 2.5), color = new_palette_colors[6], size = 3) +
geom_point(aes(x = 450, y = 1.5), color = new_palette_colors[2], size = 3) +
geom_text(aes(x = 600, y = 2.5, label = 2013)) +
geom_text(aes(x = 600, y = 1.5, label = 2023)) +
scale_x_log10(labels = number_format()) +
labs(
x = "Billion AMD",
y = NULL,
title = "From 2013 to 2023, what area had the biggest growth in GDP?",
subtitle = "The numbers show the growth rate",
captions = paste0(caption_eng, "    |    Data Source: armstat.am")
)
GDP_last_2_years_comporations <-
GDP_annual |>
filter(
year %in% c(2022,2023),
!is.na(code),
!grepl("^T$", code)
) |>
mutate(
vol_YoY_pct = vol_YoY_pct / 100 - 1,
eng = ifelse(is.na(code), eng, paste0(code, ". ", eng)),
eng = str_trunc(eng, 40),
eng = fct_reorder(eng, vol_YoY_pct, max),
year = ifelse(year == min(year), "min_year", "max_year")
) |>
select(eng, year, vol_YoY_pct) |>
pivot_wider(names_from = year, values_from = vol_YoY_pct) |>
mutate(
color = ifelse(min_year > max_year, "#f95d6a", "#2f4b7c")
) |>
# ggplot(aes(vol_YoY_pct, eng, fill = as.factor(year))) +
# geom_col(position = "dodge")
ggplot() +
geom_vline(xintercept = 0, color = "gray40") +
geom_segment(
aes(x = min_year, xend = max_year, y = eng, yend = eng,color = I(color)),
linewidth = 1.2,
lineend = 'round', linejoin = 'round',
arrow = arrow(length = unit(0.1, "inches"))
) +
geom_point(aes(x = min_year, y = eng), color = new_palette_colors[6], size = 3) +
geom_point(aes(x = max_year, y = eng), color = new_palette_colors[2], size = 3) +
# geom_text(aes(x = middle_year, y = eng, label = pct_10y_change), vjust = 0) +
geom_point(aes(x = 0.42, y = 2.5), color = new_palette_colors[6], size = 3) +
geom_point(aes(x = 0.42, y = 1.5), color = new_palette_colors[2], size = 3) +
geom_text(aes(x = 0.47, y = 2.5, label = 2022)) +
geom_text(aes(x = 0.47, y = 1.5, label = 2023)) +
scale_x_continuous(labels = percent_format()) +
labs(
x = NULL,
y = NULL,
title = "The Differences of Growth by GDP Factors in 2022 and 2023",
subtitle = "GDP volume indices by NACE 2 classification, growth to the prevous year",
captions = paste0(caption_eng, "    |    Data Source: armstat.am")
)
GDP_annual_pct <-
GDP_annual |>
filter(grepl("Domestic product", eng)) |>
transmute(year, GDP_growth = vol_YoY_pct/100 - 1) |>
na.omit()
GDP_annual_pct |>
mutate(GDP_growth = GDP_growth + 1) |>
summarise(GDP_mean_growth = (exp(mean(log(GDP_growth))) - 1)*100) |>
pull(GDP_mean_growth)
GDP_annual_contribution <-
GDP_annual |>
left_join(GDP_annual_pct, by = "year") |>
group_by(eng) |>
mutate(
vol_YoY_pct = vol_YoY_pct/100,
contribution = lag(production) * (vol_YoY_pct - 1),
contribution = ifelse(grepl("gross,", eng), NA, contribution)
) |>
group_by(year) |>
mutate(
contribution = contribution / sum(contribution, na.rm = TRUE) * GDP_growth,
contribution = ifelse(grepl("Domestic product", eng), vol_YoY_pct - 1, contribution)
) |>
select(-GDP_growth)
GDP_contribution_plot_generator <-
function(tbl, year_, groupped_codes_ = c("H","I","L","M","N","P","Q","S","T")){
tbl_groupped <-
tbl |>
filter(year %in% year_) |>
filter(!is.na(contribution)) |>
mutate(
groupped_codes = case_when(
code %in% c("C", "D", "E") ~ "C+D+E",
code %in% groupped_codes_ ~ "Servises\n(Other)",  # R հանել
grepl("Taxes on products", eng) ~ "TA",
grepl("Financial Intermediate", eng) ~ "FISIM",
grepl("Domestic product", eng) ~ "GDP\nGrowth",
TRUE ~ code
),
groupped_eng = case_when(
code %in% c("C", "D", "E") ~ "Other industries, including energy",
code %in% groupped_codes_ ~ paste(groupped_codes_, collapse = "+"),
grepl("Domestic product", eng) ~ NA,
TRUE ~ eng
),
groupped_eng = str_remove(groupped_eng, "; compulsory social security"),
groupped_eng = str_remove(groupped_eng, " .FISIM."),
) |>
group_by(groupped_codes, year, groupped_eng) |>
summarise(
contribution = sum(contribution),
.groups = "drop"
) |>
group_by(year) |>
arrange(year) |>
mutate(
labels = percent(contribution, accuracy = 0.1),
groupped_codes = fct_reorder(groupped_codes, contribution),
groupped_codes = fct_relevel(
groupped_codes, "TA", "FISIM", "GDP\nGrowth", after = Inf
),
id = as.numeric(groupped_codes)
) |>
arrange(id) |>
mutate(
annotation = paste(groupped_codes, groupped_eng, sep = " — "),
annotation = str_replace(annotation, "\n", " "),
annotation = ifelse(grepl("GDP", annotation), " ", annotation),
annotation = fct_reorder(annotation, id)
) |>
mutate(
end = cumsum(contribution),
start = end - contribution,
end = ifelse(groupped_codes == "GDP\nGrowth", 0, end),
start = ifelse(groupped_codes == "GDP\nGrowth", contribution, start),
fill_ = case_when(
groupped_codes == "GDP\nGrowth" ~ "Total",
contribution < 0 ~ "Negative",
TRUE ~ "Positive"
)
)
plot <-
tbl_groupped |>
ggplot() +
geom_hline(yintercept = 0, color = new_palette_colors[3]) +
geom_rect(
aes(xmin = id - 0.45, xmax = id + 0.45,
ymin = end, ymax = start, fill = fill_, linetype = annotation)
) +
geom_text(aes(x = groupped_codes, y = (end+start)/2, label = labels)) +
geom_segment(
aes(x = id - 0.45, xend = ifelse(id == max(id), id + 0.45, id + 0.45 + 1),
y = end, yend = end),
linetype = 1, color = new_palette_colors[3]
) +
scale_y_continuous(labels = percent_format(), n.breaks = 6) +
scale_fill_manual(values = new_palette_colors[c(6,2,8)]) +
labs(
x = NULL,
y = NULL,
fill = NULL,
linetype = NULL,
subtitle = "Percentage Points",
captions = paste0(caption_eng, "    |    Data Source: armstat.am"),
# title = paste("Factors Contributing to", year_, "Economic Growth")
title = paste("Forecast of Factors that will Contribute to", year_, "Economic Growth")
) +
guides(
linetype = guide_legend(override.aes = list(fill = "#FFFFFF00")),
color = guide_legend(order = 2),
fill = guide_legend(order = 1),
) +
theme(
panel.grid.major.x = element_blank(),
legend.text = element_text(size = 9),
)
return(plot)
}
# GDP_contribution_plot_generator(GDP_annual_contribution, year_ = 2024)
GDP_contribution_plot_generator(GDP_annual_contribution, year_ = 2024)
GDP_contribution_plot_generator(GDP_annual_contribution, year_ = 2023)
GDP_contribution_plot_generator(GDP_annual_contribution, year_ = 2024)
read_csv("~/R/Gcapatker/2024_03_24_CBA_FX/CBA_FX_data.csv") |>
mutate(year = year(date)) |>
count(year)
2024-2019
