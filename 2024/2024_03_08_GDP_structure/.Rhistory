plot.subtitle = element_text(
size = 14, color = "#ac63a0", hjust = 0.5, vjust = 0
),
plot.caption = element_text(
size = 10, color = "grey60", hjust = 0.5, vjust = 10
),
axis.title.x = element_text(
size = 10, color = "grey20", hjust = 0.5, vjust = -6
),
legend.text = element_text(
size = 9, color = "grey20"
),
legend.title = element_text(size = 10, color = "grey20"),
strip.text = element_text(size = 12),
plot.margin = unit(c(t = 1, r = -2, b = -1, l = -2), "lines"),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
5+5
eu_riv_tbl %>% glimpse()
eu_riv_test <-
eu_riv %>%
filter(LENGTH_KM > 100)
eu_riv_test %>% dim()
eu_riv_width <- get_river_width()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_bounding_box <- function(bbox, new_prj, bb) {
bbox <- st_sfc(
st_polygon(list(cbind(
c(-10.5, 48.5, 48.5, -10.5, -10.5),
c(35.000, 35.000, 69.5, 69.5, 35.000)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = 4087)
bb <- sf::st_bbox(new_prj)
return(bb)
}
bbox <- get_bounding_box()
ggplot() +
geom_sf(
data = eu_riv_width,
aes(
color = factor(ORD_FLOW), size = width,
alpha = factor(ORD_FLOW)
)
) +
coord_sf(
crs = 4087,
xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])
)
ggplot() +
geom_sf(
data = eu_riv_width,
aes(
color = factor(ORD_FLOW), size = width,
alpha = factor(ORD_FLOW)
)
) +
coord_sf(
crs = 4087,
xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])
) +
labs(
y = "", subtitle = "",
x = "",
title = "",
caption = ""
) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#08519c", "#2171b5",
"#4292c6", "#6baed6", "#9ecae1",
"#c6dbef", "#deebf7"
)
) +
scale_size(range = c(0, .3)) +
scale_alpha_manual(values = c(
"3" = 1, "4" = 1, "5" = .7, "6" = .6,
"7" = .4, "8" = .3, "9" = .2, "10" = .1
)) +
theme_minimal()
eu_riv_test <-
eu_riv %>%
filter(LENGTH_KM > 10)
eu_riv_test %>% glimpse()
eu_riv_test <-
eu_riv %>%
filter(LENGTH_KM > 50)
eu_riv_test %>% glimpse()
eu_riv_test <-
eu_riv %>%
filter(LENGTH_KM > 40)
eu_riv_test %>% glimpse()
eu_riv_test <-
eu_riv %>%
filter(LENGTH_KM > 30)
eu_riv_test %>% glimpse()
get_river_width <- function() {
eu_riv_width <- eu_riv_test |>
dplyr::mutate(
width = as.numeric(ORD_FLOW),
width = dplyr::case_when(
width == 3 ~ 1,
width == 4 ~ 0.8,
width == 5 ~ 0.6,
width == 6 ~ 0.4,
width == 7 ~ 0.2,
width == 8 ~ 0.2,
width == 9 ~ 0.1,
width == 10 ~ 0.1,
TRUE ~ 0
)
) |>
sf::st_as_sf()
return(eu_riv_width)
}
eu_riv_width <- get_river_width()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_bounding_box <- function(bbox, new_prj, bb) {
bbox <- st_sfc(
st_polygon(list(cbind(
c(-10.5, 48.5, 48.5, -10.5, -10.5),
c(35.000, 35.000, 69.5, 69.5, 35.000)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = 4087)
bb <- sf::st_bbox(new_prj)
return(bb)
}
bbox <- get_bounding_box()
bbox <- c(bottom = 40.5, top = 41.3, left = 43.95, right = 45.7)
ggplot() +
geom_sf(
data = eu_riv_width,
aes(
color = factor(ORD_FLOW), size = width,
alpha = factor(ORD_FLOW)
)
) +
coord_sf(
crs = 4087,
xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])
) +
labs(
y = "", subtitle = "",
x = "",
title = "",
caption = ""
) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#08519c", "#2171b5",
"#4292c6", "#6baed6", "#9ecae1",
"#c6dbef", "#deebf7"
)
) +
scale_size(range = c(0, .3)) +
scale_alpha_manual(values = c(
"3" = 1, "4" = 1, "5" = .7, "6" = .6,
"7" = .4, "8" = .3, "9" = .2, "10" = .1
)) +
theme_minimal()
demo()
Japanese()
is.things()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(RcppRoll)
library(scales)
library(readxl)
rm(list = ls()); gc()
theme_tvyal <- function(base_size = 12, base_family = "sans")
{
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(
base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "black"),
rect = element_rect(fill = "white", linetype = 0, colour = NA),
text = element_text(colour = colors["Dark Gray"]),
# axis.title = element_blank(),
# axis.text = element_text(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
panel.grid = element_line(colour = NULL),
panel.grid.major = element_line(colour = colors["Medium Gray"]),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), "lines"), strip.background = element_rect()
)
)
}
theme_set(theme_tvyal())
save_last_plot <-
function(filename, extension = "png", width = 1344, height = 756) {
filename <- str_replace_all(filename, " ", "_")
last_plot <- recordPlot()
if (extension == "png") {
png(paste0(filename, ".", extension), width = width, height = height)
} else if (extension == "pdf") {
pdf(paste0(filename, ".", extension), width = width, height = height)
} else {
stop("Unsupported file extension. Use 'png' or 'pdf'.")
}
replayPlot(last_plot)
dev.off()
paste0(filename, ".", extension)
}
new_palette_colors <- c(
"#003f5c", "#2f4b7c", "#665191", "#a05195",
"#d45087", "#f95d6a", "#ff7c43", "#ffa600"
)
update_geom_defaults("rect", list(fill  = new_palette_colors[1], alpha = 0.8))
update_geom_defaults("line", list(color = new_palette_colors[1], alpha = 0.8))
update_geom_defaults("area", list(fill  = new_palette_colors[1], alpha = 0.8))
caption_arm <-  "Հեղինակ` Աղասի Թավադյան   |   tvyal.com   |   tavadyan.com"
caption_eng <-  "Author: Aghasi Tavadyan   |   tvyal.com   |   tavadyan.com"
doParallel::registerDoParallel(cores = 8)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
national_account_html_elements <-
read_html("https://www.armstat.am/am/?nid=202") |>
html_elements("a")
national_account_urls <-
tibble(
url = html_attr(national_account_html_elements, "href"),
text = html_text(national_account_html_elements)
) |>
filter(grepl("^\\.\\./", url)) |>
mutate(
text = str_trim(text),
url = str_replace(url, "^\\.\\.", "https://www.armstat.am")
) |>
filter(text != "")
GDP_services_links <-
national_account_urls |>
filter(grepl("ծառայությունների թողարկում", text)) |>
pull(url)
GDP_services_links <-
national_account_urls |>
filter(grepl("ՀՆԱ", text)) |>
pull(url)
GDP_services_links
GDP_services_links <-
national_account_urls |>
filter(grepl("^ՀՆԱ$", text)) |>
pull(url)
GDP_services_links
GDP_services_links <-
national_account_urls |>
filter(grepl("^ՀՆԱ", text)) |>
pull(url)
GDP_services_links
system(
paste0("curl -A 'Mozilla/5.0' \"", GDP_services_links[4],
"\" -o \"GDP_services.xls\"")
)
GDP_services <-
read_excel("GDP_services.xls", skip = 4) |>
rename(code = 1, arm = 2, rus = 3, eng = 4) |>
pivot_longer(matches("\\d{4}"), names_to = "date")
GDP_services
GDP_services |> write_excel_csv("GDP_services_tidy.csv")
main_GDP_plot_data <-
GDP_services |>
filter(!is.na(code)) |>
mutate(
date = yq(date) + months(3) - days(1),
year = year(date),
eng = str_trunc(eng, 20),
eng = paste0(code, ". ", eng),
eng = fct_lump(eng, n = 7, w = value)
) |>
group_by(date, year, eng) |>
summarise(value = sum(value), .groups = "drop") |>
group_by(eng) |>
mutate(value_yoy = roll_sumr(value, 4)) |>
ungroup() |>
group_by(date) |>
na.omit() |>
mutate(
pct = value_yoy/ sum(value_yoy),
) |>
ungroup() |>
group_by(year) |>
mutate(
pct_text = ifelse(
eng != "Other" & date == max(date) & year %in% c(2013, 2023),
paste0(
"֏ ", number(value_yoy/1e6, accuracy = 0.01), "T (",
percent(pct, accuracy = 0.1), ")", " "
),
NA
),
pct_text = ifelse(
year == 2023 & eng != "Other",
paste0(" ", eng,  " ", pct_text),
pct_text
),
value_yoy = value_yoy / 1e6
) |>
ungroup() |>
mutate(
eng = fct_reorder(eng, value_yoy),
eng = fct_relevel(eng, "Other", after = 0),
eng = fct_rev(eng)
)
main_GDP_plot_data |> count(eng)
segments <-
main_GDP_plot_data |>
# filter(year %in% c(2013, 2017, 2020, 2023)) |>
group_by(year) |>
filter(date == max(date)) |>
ungroup() |>
group_by(date) |>
summarise(
value_yoy = sum(value_yoy),
value_yoy_text = number(value_yoy, accuracy = 0.01),
value_yoy = value_yoy + 1
) |>
ungroup()
GDP_main_plot <-
main_GDP_plot_data |>
ggplot(aes(date, value_yoy)) +
geom_segment(
data = segments,
aes(x = date, y = value_yoy - 1, xend = date, yend = value_yoy),color="black"
) +
geom_point(
data = segments,
aes(x = date, y = value_yoy),color="black"
) +
geom_text(
data = segments,
aes(x = date, y = value_yoy + 0.5, label = value_yoy_text)
) +
geom_area(aes(fill = eng)) +
geom_text(
data = main_GDP_plot_data |> filter(date == min(date)),
aes(label = pct_text, color = eng),
position = position_stack(vjust = 0.5), hjust = 1
) +
geom_text(
data = main_GDP_plot_data |> filter(date == max(date)),
aes(label = pct_text, color = eng),
position = position_stack(vjust = 0.5), hjust = -0
) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(breaks = seq(0, 14, 2), labels = number_format()) +
scale_fill_manual(values = new_palette_colors) +
scale_color_manual(values = new_palette_colors) +
coord_cartesian(clip = "off") +
ggthemes::theme_fivethirtyeight() +
labs(
x = NULL,
y = NULL,
fill = NULL,
title = "The Change from Agriculture to Manufacturing",
subtitle = "Output of Goods and Service in Armenia",
captions = paste0(caption_eng, "    |    Data Source: armstat.am")
) +
theme_minimal() +
theme(
axis.line.x = element_line(linewidth = .75),
plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 18),
panel.grid = element_blank(),
axis.text.y=element_blank(),
legend.position = "none",
plot.margin = margin(10,210,10,100),
)
GDP_main_plot
GDP_change_plot <-
GDP_services |>
filter(!is.na(code)) |>
mutate(
date = yq(date) + months(3) - days(1),
year = year(date),
eng = str_trunc(eng, 40),
eng = paste0(code, ". ", eng),
) |>
group_by(code) |>
mutate(value_yoy = roll_sumr(value, 4) / 1e3) |>
na.omit() |>
filter(date %in% c(max(date), min(date))) |>
# filter(date %in% c(max(date), as.Date("2018-03-31"))) |>
mutate(year = ifelse(year == min(year), "min_year", "max_year")) |>
select(code, eng, year, value_yoy) |>
pivot_wider(names_from = year, values_from = value_yoy) |>
mutate(
pct_10y_change = number(max_year / min_year, accuracy = 0.01),
middle_year = exp((log(min_year) + log(max_year))/2)  # geomean
) |>
filter(code != "T") |>
ggplot() +
geom_segment(
aes(x = min_year, xend = max_year, y = fct_reorder(eng, max_year), yend = eng),
color=new_palette_colors[1]
) +
geom_point(aes(x=min_year, y=eng), color=new_palette_colors[3], size=3) +
geom_point(aes(x=max_year, y=eng), color=new_palette_colors[4], size=3) +
geom_text(aes(x = middle_year, y = eng, label = pct_10y_change), vjust = 0) +
scale_x_log10(labels = number_format()) +
labs(
x = "Billion AMD",
y = NULL,
title = "From 2013 to 2023, what area had the biggest growth in GDP?",
subtitle = "The numbers show the growth rate",
captions = paste0(caption_eng, "    |    Data Source: armstat.am")
)
GDP_change_plot
library(tidyverse)
trade_test <- read_csv("C:/Users/Lenovo/Downloads/World_trade_all_2017_10-12.csv")
n = 1000
a1 <- c(rbind((1:n)*2-1, 1:n))
b1 <- cumsum(a1)
c1 <- 1:10
d1 = NULL
d1 = c(1,2)
for (i in 2:10) {
for (j in 2:10) {
if (j < i) {
}
}
}
n = 1:1e6
2*(prod((2*n)^2) / prod((2*n-1)^2,tail(n, 1)*2+1))
2*exp(log(prod((2*n)^2) / prod((2*n-1)^2,tail(n, 1)*2+1)))
2*exp(sum(2*log(2*n)) - sum(2*log(2*n-1)) - log(tail(n, 1)*2+1))
n2 = 1:1e6
2*exp(sum(2*log(n2)*(-1)^n2) - log(tail(n2, 1) + 1))
n = 1:1e6
exp(sum(1/(n)*(-1)^(n+1)))
library(tidyverse)
library(readxl)
library(tidytext)
initial_list <-
read_excel("C:/Users/Lenovo/Desktop/Projects/maile_list_initial.xlsx",
sheet = 2, col_names = FALSE)
initial_list %>%
rename(email = 1) %>%
tidytext::unnest_regex(email, "email", pattern = ",") %>%
unique() %>%
extract(email, into = c("user", "domain"),
regex = "(.+)@(.+)", remove = FALSE) %>%
count(domain, sort = TRUE) %>%
view()
initial_list
start = Sys.time()
colName <- c("commodity", "hs4", "year", "month", "export_tonn", "export",
"import_tonn", "import")
arm_trade_commodity <-
XML::readHTMLTable("C:/Users/Lenovo/Downloads/myXls.xls") %>%
as_tibble() %>%
unnest(`NULL`) %>%
setNames(colName) %>%
hablar::retype() %>%
mutate(
date = ym(paste(year, month)),
hs2 = floor(hs4/100)
)
Sys.time() - start
beepr::beep()
arm_trade_commodity %>%
filter(
hs2 == 22,
hs4 != 2208
) %>%
ggplot(aes(date, export, color = commodity)) +
geom_line(linewidth = 1.5) +
scale_color_brewer(type = "qual", palette = 3)
library(RcppRoll)
arm_trade_commodity %>%
filter(
hs2 == 22,
grepl("wines", commodity)
) %>%
# mutate(export = roll_meanl(export, n = 12)) %>%
ggplot(aes(date, export, color = commodity)) +
geom_line() +
scale_x_date(date_breaks = "1 year", date_labels = "%y")
theme_set(ggthemes::theme_fivethirtyeight())
arm_trade_commodity %>%
filter(
hs2 == 22,
month %in% 1:6,
year >= 2019
) %>%
group_by(year, hs4, commodity) %>%
summarise(
export = sum(export),
export_tonn = sum(export_tonn),
.groups = "drop"
) %>%
arrange(hs4) %>%
group_by(hs4) %>%
mutate(exp_pct = export / lag(export),
exp_tonn_pct = export_tonn / lag(export_tonn)) %>%
view()
